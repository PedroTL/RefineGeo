% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/points_out.R
\name{points_out}
\alias{points_out}
\title{Check Points Outside a Municipality Polygon}
\usage{
points_out(df, lat, lon, out_col_name, code_muni, year, polygon_crs)
}
\arguments{
\item{df}{A dataframe containing latitude and longitude columns.}

\item{lat}{A string indicating the column name for latitude.}

\item{lon}{A string indicating the column name for longitude.}

\item{out_col_name}{A string indicating the name for the output column containing the result.}

\item{code_muni}{The municipality code for the area of interest.}

\item{year}{The year of the municipality data.}

\item{polygon_crs}{The coordinate reference system (CRS) for the municipality polygon.}
}
\value{
An object of the same type as \code{.data}. The output has the fallowing proprieties:
\itemize{
\item Added \code{out_col_name} column specifying witch latitude and longitude are outside giving municipality.
\item Keeps the observation but turns the latitude and longitude in NA for points outside boundary.
}
}
\description{
This function checks whether the given latitude and longitude points are outside the specified municipality polygon.
}
\details{
This function reads municipality polygon data, transforms the points to the specified CRS,
and checks if the points are within the municipality polygon. It then creates a new column in the dataframe
indicating whether the points are inside the polygon and then assign NA to coordinates in the outside.
}
\examples{
library(dplyr)
library(sf)
library(geobr)
library(magrittr)

df <- data.frame(lat = c(-22.71704, -22.71258, -22.84277, -22.73391, -22.77165),
                 lon = c(-46.91200, -46.90435, -47.07650, -47.00500, -46.98793))

df <- points_out(df, "lat", "lon", "out_camp", code_muni = 3509502, year = 2020, polygon_crs = 4326)
print(df)
# Expected Return:
# |   lat  |  lon   | out_camp |
# |   NA   |   NA   | TRUE     |
# |   NA   |   NA   | TRUE     |
# | -22.84 | -47.08 | FALSE    |
# |   NA   |   NA   | TRUE     |
# | -22.77 | -46.99 | FALSE    |

}
\seealso{
\code{\link[sf:st_as_sf]{sf::st_as_sf()}} for convert foreign object to an sf object
\code{\link[sf:geos_binary_pred]{sf::st_within()}} for checking if points are within the municipality polygon
\code{\link[geobr:read_municipality]{geobr::read_municipality()}} for loading municipality
}
